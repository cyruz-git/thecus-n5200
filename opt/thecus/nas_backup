#!/bin/bash
# This script manages the backup drive of the NAS:
# 1. It starts the SMART test (short every day, long on saturday).
# 2. It mounts the partition.
# 3. It synchronizes the content of the storage disk to the backup disk.
# 4. It unmounts the partition and put the drive to sleep.
# --------------------------------
# cyruz - http://ciroprincipe.info

EGCTL_BIN=/usr/local/bin/egctl
EGCTL_CMD_ON="eg1 left on left left"
EGCTL_CMD_OFF="eg1 left off left left"
BK_DISK_ID=/dev/disk/by-id/ata-ST8000AS0002-1NA17Z_Z840CM1R
BK_DISK_PART_ID=/dev/disk/by-id/ata-ST8000AS0002-1NA17Z_Z840CM1R-part1
BK_DISK_PART_FS=ext4
BK_DISK_PART_MOUNT=/mnt/disk_backup
ST_DISK_PART_MOUNT=/mnt/disk_1

# This is a cleanup function executed when catching the SIGTERM signal.
exitgracefully() {
	ERRMSG="Caught SIGTERM"
	if [[ -n "$WAIT_PID" ]]; then
		kill -SIGINT $WAIT_PID
		ERRMSG=$ERRMSG" - rsync terminated"
	fi
	if [[ $(cat /proc/mounts | grep "$BK_DISK_PART_MOUNT") ]]; then
		umount $BK_DISK_PART_ID
		ERRMSG=$ERRMSG" - backup drive unmounted"
	fi
	if [[ $(smartctl -c $BK_DISK_ID | grep "Self-test routine in progress") ]]; then
		smartctl -X $BK_DISK_ID && sleep 1s
		ERRMSG=$ERRMSG" - SMART test aborted"
	fi
	hdparm -Y $BK_DISK_ID && sleep 10s && ERROR==$ERROR" - backup drive put to sleep"
	if [[ -n "$EGCTL_BIN" && -n "$EGCTL_CMD_OFF" ]]; then
		ERRMSG=$ERRMSG" - backup drive turned off"
		$EGCTL_BIN $EGCTL_CMD_OFF 2>/dev/null
	fi
	write_log -t "$ERRMSG\n" && mail_notify "$HOSTNAME - NAS_BACKUP MESSAGE" "$ERRMSG"
	toggle_led copy && remove_lock
	write_log -t "Script terminated.\n"
	exit 1
}

# Import common functions.
. "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common/nas_common.sh" || exit 1

# Redirect all output to log file and write log.
redirect_out && write_log -t "Script started.\n"

# Checks...
preliminary_check smartctl hdparm rsync
running_check

# Set trap on SIGTERM before starting operations.
trap exitgracefully SIGTERM
create_lock && toggle_led copy

# Turn on the power socket if an Energenie power outlet is used.
if [[ -n "$EGCTL_BIN" && -n "$EGCTL_CMD_ON" ]]; then
	write_log -t "Turning on the backup disk...\n"
	$EGCTL_BIN $EGCTL_CMD_ON 2>/dev/null
	# Wait for the hard drive to be recognized by the kernel.
	while [[ ! -e $BK_DISK_ID ]]; do sleep 1s; done
fi

# Start a SMART test (short everyday and long on saturday).
# The smartd daemon must be set to notify in case of failure.
#[[ $(date +%a) == "Sat" ]] && TEST=long || TEST=short
TEST=short
write_log -t "Starting $TEST SMART test on the backup drive...\n"
smartctl -t $TEST $BK_DISK_ID && sleep 1s

write_log -t "Waiting for the SMART test to terminate...\n"
while [[ $(smartctl -c $BK_DISK_ID | grep "Self-test routine in progress") ]]; do
	# Sleep in background and wait to trap signals.
	sleep 5m & wait
done

write_log -t "Mounting backup partition and starting rsync job...\n"
mount -t $BK_DISK_PART_FS $BK_DISK_PART_ID $BK_DISK_PART_MOUNT
cd $ST_DISK_PART_MOUNT
rsync -XAa --delete --exclude=lost+found --log-file=$LOG_FILE ./ $BK_DISK_PART_MOUNT &
WAIT_PID=$! # Snapraid in background, wait to trap signals.
wait
WAIT_PID="" # Whiteout the variable.

write_log -t "Unmounting backup partition and putting the drive to sleep...\n"
umount $BK_DISK_PART_ID
hdparm -Y $BK_DISK_ID && sleep 10s

# Turn off the power socket if an Energenie power outlet is used.
if [[ -n "$EGCTL_BIN" && -n "$EGCTL_CMD_OFF" ]]; then
	write_log -t "Turning off the backup disk...\n"
	$EGCTL_BIN $EGCTL_CMD_OFF 2>/dev/null
fi

# Turn off copy led, remove lock file and write log.
toggle_led copy && remove_lock
write_log -t "Script ended.\n"
